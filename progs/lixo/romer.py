# romer: utilities for the Romer project
# amoreira@ubi.pt, ljmamoreira@ubi.pt
# October 2024

import os
import numpy as np
import scipy.interpolate as intrp
import matplotlib.pyplot as plt
import datetime as dttm
from bisect import bisect_left

T = dttm.timedelta(seconds=152853.5047) # Io's orbital period in secs
AU = 149597870700
C = 299792458


# Special dates 2025
OPPO = dttm.datetime(2024, 12,  7, 20, 51,  0)
QREG = dttm.datetime(2025,  3,  2, 18, 13, 13)
CONJ = dttm.datetime(2025,  6, 24, 15, 20, 30)
QAPR = dttm.datetime(2025, 10, 17,  5, 30, 31)


# All available emmersion (regression) dates
EDATES = sorted([
    dttm.date.fromisoformat(fname[4:-4])
    for fname in os.listdir("../data/magc/emergences/")
    ])


# All available immersion (approximation) dates
IDATES = sorted([
    dttm.date.fromisoformat(fname[4:-4])
    for fname in os.listdir("../data/magc/occultations/")
    ])


def read_file(filename):
   """
   read_file(filename): reads magcurve file, returns array with time, magnitude,
   distance to Jupiter.
   time as datetime.datetime object, magnitude and distance as float, distance
   expressed in AU.
   """
   with open(filename) as file:
       txt = file.read()
   txt = txt.strip()
   datalines = txt.split('\n')
   data = []
   for line in datalines:
       items = line.split()
       time = dttm.datetime.strptime(items[0], "%Y-%m-%dT%H:%M:%S")
       vmag = float(items[1])
       dist = float(items[2])
       data.append([time, vmag, dist])
   data = np.array(data)
   #Clean data of repeated times generated by stellarium rounding core.getDate
   for i in range(len(data) - 1, 0, -1):
       if data[i, 0] == data[i-1, 0]:
           m = (data[i,1] + data[i-1,1])/2
           d = (data[i,2] + data[i-1,2])/2
           data[i-1,1] = m
           data[i-1,2] = d    
           data = np.delete(data,i,0)
   return np.array(data)


def dttm2tsecs(timearray, tref=None):
    """
    dttm2secs(timearray,tref=None): convert array of datetime.datetime objects
    in array of seconds after tref
    timearray: array of datetime.datetime objects
    tref: datetime.datetime object. If None, use first element in timearray.
    """
    if tref:
        t0 = tref
    else:
        t0 = timearray[0]
    return np.array([(tt - t0).total_seconds() for tt in timearray])
    

def tsecs2dttm(tsecs, tref):
    """
    tsecs2dttm(tsecs, tref): convert array of time intervals (in seconds) to
    array of datetime.datetime objects after tref.
    tsecs: array of floats storing durations in seconds
    tref: datetime.datetime object
    """
    return np.array([dttm.timedelta(seconds=tt)+tref for tt in tsecs])


def get_ctd(data):
    """
    get_ctd(ocurdata): return time and distance to jupiter from magnitude curve 
        stored in data
    data: array with shape (N,3) storing time (as datetime), magnitude and 
        distance to jupiter (in AU),
    """
    time_dtt, mag, dist = data.T
    tsecs = dttm2tsecs(time_dtt)
    cmag = (mag[0] + mag[-1]) / 2
    ct = intrp.Akima1DInterpolator(tsecs, mag-cmag).roots()[0]
    ctime = time_dtt[0] + dttm.timedelta(seconds=ct)
    cdist = float(intrp.InterpolatedUnivariateSpline(tsecs, dist)(ct))
    return ctime, cdist


def check_magcurve(data,show_cdata=False):
    """
    check_magcurvefille(filenale): read and process data from file filename and
    plots the magnitude curve.
    show_cdata: boolean. If True, display info for central magnitude on the plot
    """
    time, mag, dist= data.T
    t = dttm2tsecs(time)
    plt.plot(t,mag)
    if show_cdata:
        ct, cdist = get_ctd(data)
        ctsecs = (ct-time[0]).total_seconds()
        plt.vlines(ctsecs,10,16)
        print("ct=",ct)
        print("cd=",cdist,"AU")


def load_all(folder):
    """
    load_all(foldername): reads all magcurve files in folder, returns a list of
        times (in seconds) for each occurrence and corresponding list of
        distances to Jupiter.
    """
    tdist = []
    for filename in os.listdir(folder):
        data = read_file(folder + '/' + filename)
        tdist.append(get_ctd(data))
    tdist = np.array(tdist)
    tdist.sort(axis=0)
    tdt, d = tdist.T
    tsecs = dttm2tsecs(tdt)
    return tsecs, d


def find_magcfile_bydate(date, dirname):
    fnames = os.listdir(dirname)
    for fname in fnames:
        if date in fname:
            return fname
    else:
        raise IndexError("Date "+date+ "not found in "+dirname+".")


def find_magcfile_bysnum(snum, dirname):
    pass

def get_date_bracket(dl, cd, n):
    """
    get_date_quartet(dl, cd, n): return n elements from date list dl, centered
    on date cd (datetime)
    """
    cpos = bisect_left(dl, cd.date())
    spos = int(cpos - n/2)
    if spos < 0:
        raise IndexError('get_dates: no dates. n='+str(n)+'; cd='+str(cd))
    fpos = int(cpos + n/2)
    if fpos > len(dl):
        raise IndexError('get_dates: no dates. n='+str(n)+'; cd='+str(cd))
    return dl[spos], dl[fpos-1]
