# romer_utils: utilities for the Romer project
# amoreira@ubi.pt, ljmamoreira@gmail.com
# November 2024

import os
import numpy as np
import scipy.interpolate as intrp
import matplotlib.pyplot as plt
import datetime as dttm
from bisect import bisect_left


# Physical constants
T = dttm.timedelta(seconds=152853.5047) # Io's orbital period in secs
AU = 149597870700
C = 299792458

# Special dates 2025
OPPO = dttm.datetime(2024, 12,  7, 20, 51,  0)
QREG = dttm.datetime(2025,  3,  2, 18, 13, 13)
CONJ = dttm.datetime(2025,  6, 24, 15, 20, 30)
QAPR = dttm.datetime(2025, 10, 17,  5, 30, 31)

# Magnitude curves directories
EMDIR = "../data/magc/emergences/"
OCDIR = "../data/magc/occultations/"


# Available emergence (regression) dates for the synodic year
EDATES = sorted([
    dttm.date.fromisoformat(fname[2:-4])
    for fname in os.listdir(EMDIR)
    ])


# Available occultation (approximation) dates for the synodic year
IDATES = sorted([
    dttm.date.fromisoformat(fname[2:-4])
    for fname in os.listdir(OCDIR)
    ])


class Event(object):
    def __init__(self, kind, snumber, time, distance):
        self.kind = kind     # 'e' or 'o'
        self.sn = snumber
        self.t = time
        self.d = distance

    def __str__(self):
        mystr = "Event:\nkind: "
        if self.kind == 'e':
            mystr += "Emergence\n"
        else:
            mystr += "Occultation\n"
        mystr += "Series number: " + str(self.sn) + '\n'
        mystr += "Time:" + str(self.t) + '\n'
        mystr += "Distance:" + str(self.d) + " AU\n"
        return mystr


def read_file(filename):
   """
   read_file(filename): reads magcurve file, returns array with time, magnitude,
   distance to Jupiter.
   time as datetime.datetime object, magnitude and distance as float, distance
   expressed in AU.
   """
   with open(filename) as file:
       txt = file.read()
   txt = txt.strip()
   datalines = txt.split('\n')
   data = []
   for line in datalines:
       items = line.split()
       time = dttm.datetime.strptime(items[0], "%Y-%m-%dT%H:%M:%S")
       vmag = float(items[1])
       dist = float(items[2])
       data.append([time, vmag, dist])
   data = np.array(data)
   #Clean data of repeated times generated by stellarium rounding core.getDate
   for i in range(len(data) - 1, 0, -1):
       if data[i, 0] == data[i-1, 0]:
           m = (data[i,1] + data[i-1,1])/2
           d = (data[i,2] + data[i-1,2])/2
           data[i-1,1] = m
           data[i-1,2] = d    
           data = np.delete(data,i,0)
   return np.array(data)


def dttm2tsecs(timearray, tref=None):
    """
    dttm2secs(timearray,tref=None): convert array of datetime.datetime objects
    in array of seconds after tref
    timearray: array of datetime.datetime objects
    tref: datetime.datetime object. If None, use first element in timearray.
    """
    if tref:
        t0 = tref
    else:
        t0 = timearray[0]
    return np.array([(tt - t0).total_seconds() for tt in timearray])
    

def get_ctd(data):
    """
    get_ctd(ocurdata): return time and distance to jupiter from magnitude curve 
        stored in data
    data: array with shape (N,3) storing time (as datetime), magnitude and 
        distance to jupiter (in AU),
    """
    time_dtt, mag, dist = data.T
    tsecs = dttm2tsecs(time_dtt)
    cmag = (mag[0] + mag[-1]) / 2
    ct = intrp.Akima1DInterpolator(tsecs, mag-cmag).roots()[0]
    ctime = time_dtt[0] + dttm.timedelta(seconds=ct)
    cdist = float(intrp.InterpolatedUnivariateSpline(tsecs, dist)(ct))
    return ctime, cdist


def load_all(folder):
    """
    load_all(foldername): reads all magcurve files in folder, returns a list of
        times (in seconds) for each occurrence and corresponding list of
        distances to Jupiter.
    """
    tdist = []
    file_list = sorted(os.listdir(folder))
    for sn, filename in enumerate(file_list):
        data = read_file(folder + '/' + filename)
        #sn = int(filename[1:3])
        tdist.append((sn,) + get_ctd(data))
    return tdist


EMERGS = [Event('e', l[0], l[1], l[2])
            for l in load_all(EMDIR)]
OCCULS = [Event('o', l[0], l[1], l[2])
            for l in load_all(OCDIR)]


def c_simplest(ei,ef,oi,of):
    dd =  AU * ((ef.d - ei.d) - (of.d - oi.d))
    dt = ((ef.t - ei.t) - (of.t - oi.t)).total_seconds()
    return dd / dt


def get_date_cbracket(dl, cd, n):
    """
    get_date_cbracket(dl, cd, n): return initial and final dates for n
    revolutions of Io from a date list dl, centered on date cd (datetime)
    """
    cpos = bisect_left(dl, cd.date())
    spos = int(cpos - n/2)
    if spos < 0:
        raise IndexError('get_dates: no dates. n='+str(n)+'; cd='+str(cd))
    fpos = int(cpos + n/2)
    if fpos > len(dl):
        raise IndexError('get_dates: no dates. n='+str(n)+'; cd='+str(cd))
    return dl[spos], dl[fpos-1]


def event_of_date(date, evlist):
    for event in evlist:
        if event.t.date() == date:
            return event
    else:
        raise IndexError("No events match date "+str(date))


def check_magcurve(magcfile):
    """
    check_magcurvefille(filenale): read and process data from file filename and
    plots the magnitude curve.
    show_cdata: boolean. If True, display info for central magnitude on the plot
    """
    data = read_file(magcfile)
    time, mag, dist= data.T
    t = dttm2tsecs(time)
    plt.plot(t,mag)
    ct, cdist = get_ctd(data)
    ctsecs = (ct-time[0]).total_seconds()
    plt.vlines(ctsecs,8,16)
    print("ct=",ct)
    print("cd=",cdist,"AU")


def get_quartet_by_dates(d1, d2, n, set1=EMERGS, set2=OCCULS):
    """
    get_quartet_by_dates(d1, d2, n, [set1], [set2]): return 2 pairs of Io events
    spanning n orbits each, starting at dates d1 and d2, selected from sets set1
    and set2.
    """
    ev1 = event_of_date(d1, set1)
    ev2 = event_of_date(d2, set2)
    i1 = set_a.index(ev1)
    i2 = set_b.index(ev2)
    ev3 = set_a[i1+n]
    ev4 = set_b[i2+n]
    return (ev1, ev3), (ev2, ev4)

def get_quartet_ends(e_ai, e_bi, n, set_a=EMERGS, set_b=OCCULS):
    """
    get_quartet_by_events(e_ai, e_bi, n, [set_a], [set_b]): return final events
    of intervals spanning n orbits each, starting at events e_ai and e_bi,
    selected from sets set_a and set_b.
    """
    i_a = set_a.index(e_ai)
    i_b = set_b.index(e_bi)
    e_af = set_a[i_a + n]
    e_bf = set_b[i_b + n]
    return e_af, e_bf


def quartet_c(e1, e2, e3, e4):
    if int(((e2.t-e1.t)-(e4.t-e3.t))/T)!=0:
        raise ValueError("quartet_c: unequal number of orbits in the two intervals")
    dda = e2.d - e1.d
    ddr = e4.d - e3.d
    dta = (e2.t - e1.t).total_seconds()
    dtr = (e4.t - e3.t).total_seconds()
    return (ddr - dda) / (dtr - dta)

